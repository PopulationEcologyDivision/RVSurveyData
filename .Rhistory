plot(herring[herring$MISSION=="NED2016016","FWT"], herring[herring$MISSION=="NED2016016","FLEN"])
plot(herring[herring$MISSION=="TEL2017002","FWT"], herring[herring$MISSION=="TEL2017002","FLEN"])
plot(herring[herring$MISSION=="NED2017020","FWT"], herring[herring$MISSION=="NED2017020","FLEN"])
herring<- res$GSDET[res$GSDET$SPEC==60,]
herring <- herring[,c("MISSION", "FLEN", "FWT")]
herring<- herring[!is.na(herring$FLEN),]
herring<- herring[!is.na(herring$FWT),]
plot(herring[herring$MISSION=="NED2015002","FWT"], herring[herring$MISSION=="NED2015002","FLEN"])
plot(herring[herring$MISSION=="NED2015017","FWT"], herring[herring$MISSION=="NED2015017","FLEN"])
plot(herring[herring$MISSION=="TEL2016002","FWT"], herring[herring$MISSION=="TEL2016002","FLEN"])
plot(herring[herring$MISSION=="TEL2016003","FWT"], herring[herring$MISSION=="TEL2016003","FLEN"])
plot(herring[herring$MISSION=="NED2016016","FWT"], herring[herring$MISSION=="NED2016016","FLEN"])
plot(herring[herring$MISSION=="TEL2017002","FWT"], herring[herring$MISSION=="TEL2017002","FLEN"])
plot(herring[herring$MISSION=="NED2017020","FWT"], herring[herring$MISSION=="NED2017020","FLEN"])
View(GSSPECIES)
grenadiers <- GSSPECIES[grepl(x = GSSPECIES$COMM, pattern = "GRENADIER"), "CODE"]
grenadiers
grenadiers <- res$GSDET[res$GSDET$SPEC %in% grenadiers,]
grenadiers <- grenadiers [!is.na(grenadiers$FWT),]
grenadiers <- grenadiers [!is.na(grenadiers$FLEN),]
grenadiers <<- grenadiers [!is.na(grenadiers$FLEN),]
shiny::runApp('C:/git/Mar.JoyofQC')
grenadiers$YEAR <- substr(grenadiers$MISSION, 4,7)
head(grenadiers)
grenadiers$YEAR <<- substr(grenadiers$MISSION, 4,7)
grenadiers$YEAR <<- substr(grenadiers$MISSION, 4,7)
grenadiers <- GSSPECIES[grepl(x = GSSPECIES$COMM, pattern = "GRENADIER"), "CODE"]
grenadiers <- res$GSDET[res$GSDET$SPEC %in% grenadiers,]
grenadiers <- grenadiers [!is.na(grenadiers$FWT),]
grenadiers <- grenadiers [!is.na(grenadiers$FLEN),]
grenadiers <<- grenadiers [!is.na(grenadiers$FLEN),]
grenadiers$YEAR <<- substr(grenadiers$MISSION, 4,7)
# Grenadiers
grenadiers <- GSSPECIES[grepl(x = GSSPECIES$COMM, pattern = "GRENADIER"), "CODE"]
grenadiers <- res$GSDET[res$GSDET$SPEC %in% grenadiers,]
grenadiers <- grenadiers [!is.na(grenadiers$FWT),]
grenadiers <- grenadiers [!is.na(grenadiers$FLEN),]
grenadiers <- grenadiers [!is.na(grenadiers$FLEN),]
grenadiers$YEAR <<- substr(grenadiers$MISSION, 4,7)
# Grenadiers
grenadiers <- GSSPECIES[grepl(x = GSSPECIES$COMM, pattern = "GRENADIER"), "CODE"]
grenadiers <- res$GSDET[res$GSDET$SPEC %in% grenadiers,]
grenadiers <- grenadiers[!is.na(grenadiers$FWT),]
grenadiers <- grenadiers[!is.na(grenadiers$FLEN),]
grenadiers <- grenadiers[!is.na(grenadiers$FLEN),]
head(grenadiers)
substr(grenadiers$MISSION, 4,7)
grenadiers$YEAR <- numeric(substr(grenadiers$MISSION, 4,7))
grenadiers$YEAR <- as.numeric(substr(grenadiers$MISSION, 4,7))
head(grenadiers)
grenadiers <<- grenadiers
runApp('C:/git/Mar.JoyofQC')
grenadiers<-grenadiers[grenadiers$YEAR>=2010,]
grenadiers <<- grenadiers
runApp('C:/git/Mar.JoyofQC')
runApp('C:/git/Mar.JoyofQC')
View(res$GSDET[is.na(res$GSDET$FWT),])
Don <- res$GSDET
Don <- Don[Don$SPEC>1000 & is.na(Don$FWT) & !is.na(Don$FLEN),]
View(Don)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & is.na(Don$FWT) & !is.na(Don$FLEN),]
head(Don)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(tt$FWT),NA,0))
head(Don)
Don<- merge(GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "YEAR")]
S
cnames <- c("YEAR","VAL","FREQ")
SPRINGfreq<-data.frame(table(SPRING$YEAR, SPRING$TOTWGTchk))
names(SPRINGfreq) <- cnames
SPRINGfreq<- SPRINGfreq[SPRINGfreq$VAL == 0,]
SPRINGfreq<-data.frame(table(DonSPRING$YEAR, DonSPRING$TOTWGTchk))
names(SPRINGfreq) <- cnames
SPRINGfreq<- SPRINGfreq[SPRINGfreq$VAL == 0,]
SUMMERfreq<-data.frame(table(DonSUMMER$YEAR, DonSUMMER$TOTWGTchk))
names(SUMMERfreq) <- cnames
SUMMERfreq<- SUMMERfreq[SUMMERfreq$VAL == 0,]
View(SPRINGfreq)
View(DonSUMMER)
View(SUMMERfreq)
plot(SPRINGfreq$YEAR, SPRINGfreq$FREQ)
plot(SUMMERfreq$YEAR, SUMMERfreq$FREQ)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(tt$FWT),0,-1))
Don<- merge(GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "YEAR")]
cnames <- c("YEAR","VAL","FREQ")
SPRINGfreq<-data.frame(table(DonSPRING$YEAR, DonSPRING$TOTWGTchk))
names(SPRINGfreq) <- cnames
SPRINGfreq<- SPRINGfreq[SPRINGfreq$VAL == 0,]
SUMMERfreq<-data.frame(table(DonSUMMER$YEAR, DonSUMMER$TOTWGTchk))
names(SUMMERfreq) <- cnames
SUMMERfreq<- SUMMERfreq[SUMMERfreq$VAL == 0,]
plot(SPRINGfreq$YEAR, SPRINGfreq$FREQ)
head(SPRINGfreq)
View(DonSPRING)
View(DonSPRING)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(tt$FWT),0,-1))
head(Don)
head(res$GSMISSIONS)
Don<- merge(res$GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "YEAR")]
cnames <- c("YEAR","VAL","FREQ")
SPRINGfreq<-data.frame(table(DonSPRING$YEAR, DonSPRING$TOTWGTchk))
names(SPRINGfreq) <- cnames
SPRINGfreq<- SPRINGfreq[SPRINGfreq$VAL == 0,]
SUMMERfreq<-data.frame(table(DonSUMMER$YEAR, DonSUMMER$TOTWGTchk))
names(SUMMERfreq) <- cnames
SUMMERfreq<- SUMMERfreq[SUMMERfreq$VAL == 0,]
SPRINGfreq<-data.frame(table(DonSPRING$YEAR, DonSPRING$TOTWGTchk))
View(SPRINGfreq)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(Don$FWT),0,-1))
Don<- merge(res$GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "YEAR")]
cnames <- c("YEAR","VAL","FREQ")
SPRINGfreq<-data.frame(table(DonSPRING$YEAR, DonSPRING$TOTWGTchk))
names(SPRINGfreq) <- cnames
SPRINGfreq<- SPRINGfreq[SPRINGfreq$VAL == 0,]
SUMMERfreq<-data.frame(table(DonSUMMER$YEAR, DonSUMMER$TOTWGTchk))
names(SUMMERfreq) <- cnames
SUMMERfreq<- SUMMERfreq[SUMMERfreq$VAL == 0,]
plot(SPRINGfreq$YEAR, SPRINGfreq$FREQ)
plot(SUMMERfreq$YEAR, SUMMERfreq$FREQ)
View(SPRINGfreq)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(Don$FWT),0,-1))
Don<- merge(res$GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "FLEN","TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "FLEN", "YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "FLEN", "YEAR")]
head(DonSPRING)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(Don$FWT),0,-1))
Don<- merge(res$GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "FLEN","CLEN","TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "FLEN", "CLEN","YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "FLEN", "CLEN","YEAR")]
head(DonSPRING)
range(DonSPRING$CLEN)
Don <- res$GSDET
Don <- Don[Don$SPEC<1000 & !is.na(Don$FLEN) & !is.na(Don$CLEN),]
Don$TOTWGTchk<- ifelse(!is.na(Don$FWT) & Don$FWT>0,yes = 99, ifelse(is.na(Don$FWT),0,-1))
Don<- merge(res$GSMISSIONS, Don, all.y = T)
Don<- Don[,c("SEASON","YEAR", "FLEN","TOTWGTchk")]
DonSPRING <- Don[Don$SEASON=="SPRING",c("TOTWGTchk", "FLEN","YEAR")]
DonSUMMER <- Don[Don$SEASON=="SUMMER",c("TOTWGTchk", "FLEN","YEAR")]
cnames <- c("YEAR","VAL","FREQ")
SPRINGfreq<-data.frame(table(DonSPRING$YEAR, DonSPRING$TOTWGTchk))
names(SPRINGfreq) <- cnames
SPRINGfreq<- SPRINGfreq[SPRINGfreq$VAL == 0,]
SUMMERfreq<-data.frame(table(DonSUMMER$YEAR, DonSUMMER$TOTWGTchk))
names(SUMMERfreq) <- cnames
SUMMERfreq<- SUMMERfreq[SUMMERfreq$VAL == 0,]
plot(SUMMERfreq$YEAR, SUMMERfreq$FREQ)
plot(SPRINGfreq$YEAR, SPRINGfreq$FREQ)
unique(GSDET$MISSIO)
unique(GSDET$MISSI)
unique(GSDET$M)
unique(GSDET
)
cleantheGarbage(keep = res)
library(RVSurveyData)
library(RVTransmogrifier
)
res <- loadRVData()
res$GSMISSIONS
test <- res$GSDET[res$GSDET$MISSION=="CAR2021241",]
View(test)
test <- test[test$SETNO==19,]
test <- test[test$SPEC = 11,]
test <- test[test$SPEC == 11,]
# find all of the
tt <- res$GSDET
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO")])
View(setsWSizeClasses)
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO","SIZE_CLASS")])
View(setsWSizeClasses)
#add sizeclass 1
sc1<- unique(setsWSizeClasses[,c("MISSION", "SETNO")])
sc1$SIZE_CLASS = 1
setsWSizeClasses<- rbind.data.frame(setsWSizeClasses,sc1)
View(setsWSizeClasses)
MikeIt()
setsWSizeClasses = setsWSizeClasses[with(setsWSizeClasses, order(MISSION, SETNO, SIZE_CLASS)), ]
View(setsWSizeClasses)
rm(sc1)
allTbls<- c("GSCAT","GSDET")
fn.oracle.username=oracle.username
fn.oracle.password=oracle.password
fn.oracle.dsn = "PTRAN"
# make connection and extract all data to a list
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- allTbls
head(res$GSCAT)
# find all of the MISSION/SETNO combos that have size class considerations
tt <- res$GSDET
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO","SPEC","SIZE_CLASS")])
#add sizeclass 1
sc1<- unique(setsWSizeClasses[,c("MISSION", "SETNO", "SPEC")])
sc1$SIZE_CLASS = 1
setsWSizeClasses<- rbind.data.frame(setsWSizeClasses,sc1)
head(setsWSizeClasses)
rm(sc1)
setsWSizeClasses = setsWSizeClasses[with(setsWSizeClasses, order(MISSION, SETNO, SIZE_CLASS)), ]
head(res$GSCAT)
ratioData <- res$GSCAT[paste0(res$GSCAT$MISSION,"_",res$GSCAT$SETNO,"_", res$GSCAT$SPEC,"_", res$GSCAT$SIZE_CLASS) %in%
paste0(setsWSizeClasses$MISSION,"_",setsWSizeClasses$SETNO,"_", setsWSizeClasses$SPEC,"_", setsWSizeClasses$SIZE_CLASS),
c("MISSION", "SETNO", "SPEC", "SIZE_CLASS", "SAMPWGT","TOTWGT", "TOTNO") ]
head(ratioData)
head(tt)
tt <- res$GSDET
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO","SPEC")])
head(setsWSizeClasses)
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO","SPEC")])
ratioData <- res$GSCAT[paste0(res$GSCAT$MISSION,"_",res$GSCAT$SETNO,"_", res$GSCAT$SPEC) %in%
paste0(setsWSizeClasses$MISSION,"_",setsWSizeClasses$SETNO,"_", setsWSizeClasses$SPEC),
c("MISSION", "SETNO", "SPEC", "SIZE_CLASS", "SAMPWGT","TOTWGT", "TOTNO") ]
head(ratioData)
chk <- merge(tt, ratioData, all.x=T, by = c("MISSION", "SETNO", "SPEC", "SIZE_CLASS"))
head(chk)
View(chk)
chk$RATIO <- (chk$TOTNO/chk$SAMPWGT)*chk$CLEN
chk$RATIO <- (chk$TOTWGT/chk$SAMPWGT)*chk$CLEN
chk$RATIO <- (chk$TOTWGT/chk$SAMPWGT)*chk$TOTNO
chk$RATIO <- (chk$TOTWGT/chk$SAMPWGT)/chk$TOTNO
chk$RATIO <- (chk$TOTWGT/chk$SAMPWGT)*chk$TOTNO
chk$RATIO <- (chk$TOTWGT/chk$SAMPWGT)/chk$TOTNO
chk$RATIO <- (chk$TOTWGT/chk$SAMPWGT)*chk$CLEN
chk<-chk[!is.na(chk$RATIO),]
tt <- res$GSDET
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO","SPEC")])
ratioData <- res$GSCAT[paste0(res$GSCAT$MISSION,"_",res$GSCAT$SETNO,"_", res$GSCAT$SPEC) %in%
paste0(setsWSizeClasses$MISSION,"_",setsWSizeClasses$SETNO,"_", setsWSizeClasses$SPEC),
c("MISSION", "SETNO", "SPEC", "SIZE_CLASS", "SAMPWGT","TOTWGT") ]
chk <- merge(tt, ratioData, all.x=T, by = c("MISSION", "SETNO", "SPEC", "SIZE_CLASS"))
chk$CLEN2 <- (chk$TOTWGT/chk$SAMPWGT)*chk$CLEN
chk<-chk[!is.na(chk$RATIO),]
chk<-chk[!is.na(chk$CLEN2),]
tt <- res$GSDET
setsWSizeClasses <- unique(tt[tt$SIZE_CLASS>1, c("MISSION", "SETNO","SPEC")])
ratioData <- res$GSCAT[paste0(res$GSCAT$MISSION,"_",res$GSCAT$SETNO,"_", res$GSCAT$SPEC) %in%
paste0(setsWSizeClasses$MISSION,"_",setsWSizeClasses$SETNO,"_", setsWSizeClasses$SPEC),
c("MISSION", "SETNO", "SPEC", "SIZE_CLASS", "SAMPWGT","TOTWGT") ]
chk <- merge(tt, ratioData, all.x=T, by = c("MISSION", "SETNO", "SPEC", "SIZE_CLASS"))
chk$CLEN2 <- (chk$TOTWGT/chk$SAMPWGT)*chk$CLEN
chk<-chk[!is.na(chk$CLEN2),]
View(chk)
chk<-chk[,c("MISSION","SETNO","SPEC", "SIZE_CLASS", "FLEN", "CLEN", "SAMPWGT", "TOTWGT","CLEN2")]
example_list <- list(data.frame(x = 1:5, y = 5:1),                       # Constructing list object
LETTERS[15:7],
"yayaya")
names(exampl)
names(example_list)
names(example_list) <- paste0("My_Element_No_", 1:length(example_list))
names(example_list)
names(example_list)[1] <- "AA"
names(example_list)
names(example_list$AA) <- "BB"
names(example_list)
names(example_list)[names(example_list) == "AA"] <- "new.name"
names(example_list)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
devtools::document()
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
devtools::document()
remove.packages("RVSurveyData", lib="~/R/win-library/4.1")
devtools::document()
library(RVSurveyData)
devtools::document()
updateData<-function(tbls= c("GSSPECIES_20220624"),
fn.oracle.username=oracle.username,
fn.oracle.password=oracle.password,
fn.oracle.dsn = "PTRAN"){
# make connection and extract all data to a list
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
res <- lapply(tbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- tbls
return(res)
}
res <- updateData()
res$GSSPECIES_20220624$N_OCCURENCES_GSCAT <- NULL
res$GSSPECIES_20220624$ENTR <- NULL
head(res$GSSPECIES_20220624)
#rename the new species table to GSSPECIES
names(res)[names(res) == "GSSPECIES_20220624"] <- "GSSPECIES"
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSSPECIES.rda")
devtools::document()
devtools::document()
devtools::document()
tools::buildVignettes(dir = ".", tangle=TRUE)
# dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
devtools::document()
devtools::document()
devtools::document()
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
# dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
# dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
# dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
detach("package:RVSurveyData", unload = TRUE)
remove.packages("RVSurveyData", lib="~/R/win-library/4.1")
devtools::install_github('PopulationEcologyDivision/RVSurveyData')
library(RVSurveyData)
sf::plot(Mar.data::NAFOSubunitsLnd_sf)
library(sf)
plot(Mar.data::NAFOSubunitsLnd_sf)
head(Mar.data::NAFOSubunitsLnd_sf)
#stuff below is for Kasia's new improved layer.
# nafo_sf <- sf::st_read("inst/rawSpatial/NAFO_polyBlocks.shp")
# nafo_sf$Shape_Leng<- nafo_sf$ORIG_FID <- nafo_sf$Shape_Le_1 <- nafo_sf$Shape_Area <- nafo_sf$OBJECTID <- NULL
# colnames(nafo_sf)[colnames(nafo_sf)=="UnitArea"] <- "NAFO"
# nafo_sf$NAFO <- toupper(nafo_sf$NAFO)
# nafo_sf <- st_transform(nafo_sf, crs = 4326)
nafo_sf <- Mar.data::NAFOSubunits_sf
usethis::use_data(nafo_sf, overwrite = TRUE)
head(nafo_sf)
View(nafo_sf)
View(nafo_sf[!is.na(nafo_sf$\)])
View(nafo_sf[!is.na(nafo_sf$COD)])
View(nafo_sf[!is.na(nafo_sf$COD),c("NAFO_BEST", "COD", "COD_BEST")])
devtools::document()
dataLF <- readRDS("C:/git/PopulationEcologyDivision/RVTransmogrifier/dataLF.rds")
usethis::use_data(dataLF)
usethis::use_data(dataLF,overwrite = T)
library(RVSurveyData)
head(dataLF)
fathoms_to_meters <- function(field = NULL) {
field <- round(field*1.8288,2)
return(field)
}
DDMM_to_DDDD <- function(field = NULL){
dfNm <-deparse(substitute(field))
field <- (as.numeric(substr(field,1,2)) +(field - as.numeric(substr(field,1,2))*100)/60)
if (grepl("LONG", dfNm)) field <- field*-1
field <- round(field,6)
return(field)
}
if (!require(purrr)) install.packages('purrr')
if (!require(dplyr)) install.packages('dplyr')
if (!require(devtools)) install.packages('devtools')
library(purrr)
library(dplyr)
library(devtools)
allTbls = c("GSAUX", "GSCAT", "GSCURNT", "GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT", "GSINF", "GSMATURITY",
"GSMISSIONS", "GSSEX","GSSPEC",
"GSSTRATUM", "GSWARPOUT", "GSXTYPE",
"GSSPECIES_20220624", "GSSPECIES_TAX")
# make connection and extract all data to a list
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username=oracle.username, fn.oracle.password=oracle.password, "PTRAN")
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username=oracle.username, fn.oracle.password=oracle.password, "PTRAN_64")
library(ROracle)
oracle.username
oracle.password
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), oracle.username, oracle.password, "PTRAN")
allTbls = c("GSAUX", "GSCAT", "GSCURNT", "GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT", "GSINF", "GSMATURITY",
"GSMISSIONS", "GSSEX","GSSPEC",
"GSSTRATUM", "GSWARPOUT", "GSXTYPE",
"GSSPECIES_20220624", "GSSPECIES_TAX")
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- allTbls
saveRDS(res, "C:\git\PopulationEcologyDivision\RVSurveyData\inst\GSExtract20220811.rds")
saveRDS(res, "C:/git/PopulationEcologyDivision/RVSurveyData/inst/GSExtract20220811.rds")
res$GSINF$SLAT_DD  <- DDMM_to_DDDD(res$GSINF$SLAT)
res$GSINF$SLONG_DD <- DDMM_to_DDDD(res$GSINF$SLONG)
res$GSINF$ELAT_DD  <- DDMM_to_DDDD(res$GSINF$ELAT)
res$GSINF$ELONG_DD <- DDMM_to_DDDD(res$GSINF$ELONG)
res$GSINF$SLAT <- res$GSINF$SLONG <- res$GSINF$ELAT <- res$GSINF$ELONG <- NULL
#GSINF: populate DEPTH using DEPTH, START_DEPTH and END_DEPTH, as available
#(DEPTH used preferentially, otherwise use average of START_DEPTH and END_DEPTH)
res$GSINF$DEPTH_tmp <- NA
res$GSINF$DEPTH_tmp <- rowMeans(res$GSINF[,c("START_DEPTH","END_DEPTH")], na.rm = F) #first do average
res$GSINF[!is.na(res$GSINF$DEPTH),"DEPTH_tmp"]<- res$GSINF[!is.na(res$GSINF$DEPTH),"DEPTH"] #overwrite w depth, where avail
res$GSINF$DEPTH <- res$GSINF$DEPTH_tmp
res$GSINF$DEPTH_tmp <- NULL
#GSINF: add meters version of depths
res$GSINF$DMIN_M        <- fathoms_to_meters(res$GSINF$DMIN)
res$GSINF$DMAX_M        <- fathoms_to_meters(res$GSINF$DMAX)
res$GSINF$DEPTH_M       <- fathoms_to_meters(res$GSINF$DEPTH)
res$GSINF$START_DEPTH_M <- fathoms_to_meters(res$GSINF$START_DEPTH)
res$GSINF$END_DEPTH_M   <- fathoms_to_meters(res$GSINF$END_DEPTH)
res$GSINF$DMIN <- res$GSINF$DMAX <- res$GSINF$DEPTH <- res$GSINF$START_DEPTH <- res$GSINF$END_DEPTH <- NULL
#GSINF: remove the time component from SDATE - "TIME" field should be used instead.
# remove ETIME - for end time, best to add tow duration to TIME field
res$GSINF$SDATE <- as.Date(res$GSINF$SDATE)
res$GSINF$ETIME <- NULL
length(res$GSDET[substr(res$GSDET$MISSION,4,7) <= 2016 &
!res$GSDET$MISSION %in% c("NED2016116","NED2016016") &
!is.na(res$GSDET$FLEN),"FLEN"])
length(res$GSDET[res$GSDET$SPEC == 60 &
substr(res$GSDET$MISSION,4,7) <= 2016 &
!res$GSDET$MISSION %in% c("NED2016116","NED2016016") &
!is.na(res$GSDET$FLEN),"FLEN"])
res$GSDET[res$GSDET$SPEC == 60 &
substr(res$GSDET$MISSION,4,7) <= 2016 &
!res$GSDET$MISSION %in% c("NED2016116","NED2016016") &
!is.na(res$GSDET$FLEN),"FLEN"] <- res$GSDET[res$GSDET$SPEC == 60 &
substr(res$GSDET$MISSION,4,7) <= 2016 &
!res$GSDET$MISSION %in% c("NED2016116","NED2016016") &
!is.na(res$GSDET$FLEN),"FLEN"]*10
hist(res$GSDET[res$GSDET$SPEC==10,"FLEN"])
dataLF <- res$GSDET
#get the totwgt and sampwgt for every mission/set/spec/size_class combo, and use them to create
#a ratio, and apply it to existing CLEN
dataLF <- merge(dataLF,
res$GSCAT[,c("MISSION", "SETNO", "SPEC", "SIZE_CLASS", "SAMPWGT","TOTWGT")],
all.x = T, by = c("MISSION", "SETNO", "SPEC", "SIZE_CLASS"))
dataLF$CLEN_corr <- dataLF$CLEN
#if non-na values exist for totwgt and sampwgt (and are >0), use them to bump up CLEN
dataLF[!is.na(dataLF$TOTWGT) & !is.na(dataLF$SAMPWGT) & (dataLF$SAMPWGT> 0) & (dataLF$TOTWGT>0),"CLEN_corr"] <- round((dataLF[!is.na(dataLF$TOTWGT) & !is.na(dataLF$SAMPWGT) & (dataLF$SAMPWGT> 0) & (dataLF$TOTWGT>0),"TOTWGT"]/dataLF[!is.na(dataLF$TOTWGT) & !is.na(dataLF$SAMPWGT)  & (dataLF$SAMPWGT> 0) & (dataLF$TOTWGT>0),"SAMPWGT"])*dataLF[!is.na(dataLF$TOTWGT) & !is.na(dataLF$SAMPWGT) & (dataLF$SAMPWGT> 0) & (dataLF$TOTWGT>0),"CLEN"],3)
#need to bump up CLEN by TOW dist!
dataLF <- merge(dataLF, GSINF[,c("MISSION", "SETNO", "DIST")],all.x = T, by = c("MISSION", "SETNO"))
#need to bump up CLEN by TOW dist!
dataLF <- merge(dataLF, res$GSINF[,c("MISSION", "SETNO", "DIST")],all.x = T, by = c("MISSION", "SETNO"))
dataLF[is.na(dataLF$DIST),"DIST"] <- 1.75
dataLF$CLEN_corr <- round(dataLF$CLEN_corr *(1.75/dataLF$DIST),6)
dataLF$CLEN <- dataLF$DIST <- NULL
colnames(dataLF)[colnames(dataLF)=="CLEN_corr"] <- "CLEN"
dataLF <- dataLF[,c("MISSION", "SETNO", "SPEC", "FLEN", "FSEX", "CLEN")]
dataLF <- dataLF %>%
group_by(MISSION, SETNO, SPEC, FSEX, FLEN) %>%
summarise(CLEN = sum(CLEN), .groups = "keep") %>%
as.data.frame()
hist(dataLF[dataLF$SPEC==10,"FLEN"])
res$dataLF <- dataLF
rm(dataLF)
dataDETS <- res$GSDET
dataDETS <- dataDETS[,!names(dataDETS) %in% c("CLEN", "SIZE_CLASS")]
# remove internal fields
dataDETS <- dataDETS[,!names(dataDETS) %in% c("NANN", "EDGE", "CHKMRK", "AGER", "REMARKS" )]
# keep only informative records
dataDETS <- dataDETS[!is.na(dataDETS$FLEN) | !is.na(dataDETS$FSEX)| !is.na(dataDETS$FMAT)| !is.na(dataDETS$FWT)| !is.na(dataDETS$AGE),]
#reorder columns
dataDETS <- dataDETS[,c("MISSION", "SETNO", "SPEC", "FSHNO", "SPECIMEN_ID", "FLEN", "FSEX", "FMAT",  "FWT", "AGMAT", "AGE")]
res$dataDETS <- dataDETS
res$GSDET <-NULL
rm(dataDETS)
res$GSCAT <- res$GSCAT %>%
group_by(MISSION, SETNO, SPEC) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT), .groups = "keep") %>%
as.data.frame()
res$GSSPECIES_20220624$N_OCCURENCES_GSCAT <- NULL
res$GSSPECIES_20220624$ENTR <- NULL
#rename the new species table to GSSPECIES
names(res)[names(res) == "GSSPECIES_20220624"] <- "GSSPECIES"
head(res$GSSPECIES)
head(res$GSSPEC)
tt<-  merge(res$GSSPECIES, res$GSSPEC[, c("SPEC","LGRP","LFSEXED")], all.x=T)
View(tt)
tt<-  merge(res$GSSPECIES, res$GSSPEC[, c("SPEC","LGRP","LFSEXED")], all.x=T, by.x="CODE", by.y = "SPEC")
res$GSSPECIES <-  merge(res$GSSPECIES, res$GSSPEC[, c("SPEC","LGRP","LFSEXED")], all.x=T)
tt <-  merge(res$GSSPECIES, res$GSSPECIES_TAX, all.x=T)
head(tt)
View(tt)
res$GSSPEC <- res$GSSPECIES_TAX <- NULL
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
devtools::document()
devtools::document()
remove.packages("RVSurveyData", lib="~/R/win-library/4.1")
devtools::install_github('PopulationEcologyDivision\RVSurveyData')
devtools::install_github('PopulationEcologyDivision/RVSurveyData')
