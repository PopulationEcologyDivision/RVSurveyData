rm(list = c("listTbls"))
devtools::document()
devtools::document()
sort(RVSurveyData::getTbls())
sort(RVSurveyData::listTbls())
devtools::document()
RVSurveyData::listTbls()
data(package = .packages(all.available = TRUE))
tt<-data(package = "RVSurveyData")
tt
tt$title
head(tt$results)
head(tt$results$Item)
tt$results$Item
tt$results
class(tt$results)
dat <- as.data.frame(data(package = .packages(all.available = TRUE)))
dat <- as.data.frame(data(package = "RVSurveyData"))
tt<-data(package = "RVSurveyData")
as.data.frame(tt)
str(tt)
names(data(package = "RVSurveyData"))
ls("package:RVSurveyData")
ls("package::RVSurveyData")
ls(RVSurveyData)
ls("package:RVSurveyData")
tt<-data(package = "RVSurveyData")
tt
tt1<-tt$results
tt1
class(tt1)
tt1[3,]
tt1[,3]
tt<-data(package = "RVSurveyData")$results
data(package = "RVSurveyData")$results[,3]
data(package = "RVSurveyData")$results[,"Item"]
devtools::document()
devtools::document()
library(ggplot2)
library(mapdata)
library(sf)
nafo_sf <- sf::st_read("inst/rawSpatial/NAFO_polyBlocks.shp")
nafo_sf$Shape_Leng<- nafo_sf$ORIG_FID <- nafo_sf$Shape_Le_1 <- nafo_sf$Shape_Area <- nafo_sf$OBJECTID <- NULL
colnames(nafo_sf)[colnames(nafo_sf)=="UnitArea"] <- "NAFO"
nafo_sf$NAFO <- toupper(nafo_sf$NAFO)
nafo_sf <- st_transform(nafo_sf, crs = 4326)
usethis::use_data(nafo_sf, overwrite = TRUE)
strataMar_sf <- sf::st_read("inst/rawSpatial/MaritimesRegionEcosystemAssessmentStrata(2014-).shp")
colnames(strataMar_sf)[colnames(strataMar_sf)=="StrataID"] <- "STRATA_ID"
colnames(strataMar_sf)[colnames(strataMar_sf)=="Areakm"] <- "AREA_KM"
strataMar_sf <- st_transform(strataMar_sf, crs = 4326)
usethis::use_data(strataMar_sf, overwrite = TRUE)
reg = ggplot2::map_data("world2Hires")
reg = subset(reg, region %in% c('Canada', 'USA', 'France'))
extStrata <- st_bbox(strataMar_sf)
extNafo <- st_bbox(nafo_sf)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA) +
geom_sf(data = strataMar_sf, fill="steelblue1") +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = FALSE)
?map_data
reg = subset(reg, region %in% c('Canada', 'USA', 'France'))
extStrata <- st_bbox(strataMar_sf)
extNafo <- st_bbox(nafo_sf)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA) +
geom_sf(data = strataMar_sf, fill="steelblue1") +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = FALSE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA) +
geom_sf(data = strataMar_sf, fill="steelblue1") +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = FALSE)
extStrata
extNafo
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA) +
geom_sf(data = nafo_sf, fill="steelblue1") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = FALSE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = "darkgrey") +
geom_sf(data = nafo_sf, fill="steelblue1") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = FALSE)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = strataMar_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA) +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = FALSE)
reg = ggplot2::map_data("world2Hires")
reg = subset(reg, region %in% c('Canada', 'USA', 'France'))
reg[reg$long > 180, "long"] <- -360+reg[reg$long > 180, "long"]
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = strataMar_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = NA) +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = FALSE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = "darkgrey") +
geom_sf(data = nafo_sf, fill="steelblue1") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = FALSE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "darkgrey", color = "darkgrey") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = FALSE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "darkgrey") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = FALSE)
extNafo[["xmin"]]
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "darkgrey") +
coord_sf(xlim = c(extNafo[["xmin"]]-(0.1*extNafo[["xmin"]]), extNafo[["xmax"]]+(0.1*extNafo[["xmax"]])),
ylim = c(extNafo[["ymin"]]-(0.1*extNafo[["ymin"]]), extNafo[["ymax"]]+(0.1*extNafo[["ymax"]])), expand = FALSE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "darkgrey") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = TRUE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "black") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = TRUE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "grey10") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = TRUE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "grey25") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = TRUE)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = strataMar_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "grey25") +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = TRUE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "grey25") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = TRUE)
usethis::use_data(strataMar_sf, overwrite = TRUE)
usethis::use_data(nafo_sf, overwrite = TRUE)
st_crs(nafo_sf)
sourcery()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
data(GSMISSIONS, package = "RVSurveyData")
print(head(GSMISSIONS))
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(1, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(1, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(1, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
print(recentData)
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$SEASON, -rank(recentData$YEA)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$SEASON, -rank(recentData$YEAR)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$SEASON, -rank(recentData$YEAR)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
print(recentData)
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$SEASON, -rank(recentData$YEAR)),]
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(3, YEAR)
recentData <- recentData[order(-recentData$SEASON, -rank(recentData$YEAR)),]
recentData
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(2, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
print(recentData)
data(GSMISSIONS, package = "RVSurveyData")
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(2, YEAR)
recentData <- recentData[order( -rank(recentData$SEASON),-recentData$YEAR),]
print(recentData)
devtools::install(build_vignette = FALSE)
library(dplyr)
unlink("vignettes/RVSurveyData_cache", recursive = TRUE)
cat(utils::data(package = "RVSurveyData")$results[,"Item"])
cat(paste(utils::data(package = "RVSurveyData")$results[,"Item"]),sep = "\" )
cat(paste(utils::data(package = "RVSurveyData")$results[,"Item"]),sep = "\"" )
cat(paste(utils::data(package = "RVSurveyData")$results[,"Item"]),sep = "\n" )
reg = ggplot2::map_data("world2Hires")
reg = subset(reg, region %in% c('Canada', 'USA', 'France'))
#presence of France seems to force coordinates to do 0 to 360 instead of -180 to 180
reg[reg$long > 180, "long"] <- -360+reg[reg$long > 180, "long"]
extStrata <- st_bbox(strataMar_sf)
extNafo <- st_bbox(nafo_sf)
ggplot() +
ggtitle("strataMar_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = strataMar_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "grey25") +
coord_sf(xlim = c(extStrata[["xmin"]], extStrata[["xmax"]]),
ylim = c(extStrata[["ymin"]], extStrata[["ymax"]]), expand = TRUE)
ggplot() +
ggtitle("nafo_sf") +
xlab("Longitude") + ggplot2::ylab("Latitude") +
geom_sf(data = nafo_sf, fill="steelblue1") +
geom_polygon(data = reg, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "grey25") +
coord_sf(xlim = c(extNafo[["xmin"]], extNafo[["xmax"]]),
ylim = c(extNafo[["ymin"]], extNafo[["ymax"]]), expand = TRUE)
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSCAT.rda")
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSDET.rda")
head(GSCAT)
head(GSDET)
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSSPECIES_20220624.rda")
nrow(GSSPECIES_20220624[!is.na(GSSPECIES_20220624$IDD_CONFID_SINCE),])
head(GSSPECIES_20220624[!is.na(GSSPECIES_20220624$IDD_CONFID_SINCE),])
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSSPECIES_TAX.rda")
View(GSSPECIES_TAX)
View(GSSPECIES_20220624)
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSINF.rda")
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSDET.rda")
head(GSDET)
head(GSCAT)
GSINF <- load("c:/git/PopulationEcologyDivision/RVTransmogrifier/mm.rds")
GSINF <- readRDS("c:/git/PopulationEcologyDivision/RVTransmogrifier/mm.rds")
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSINF.rda")
nrow(GSINF)
GSINF <- readRDS("c:/git/PopulationEcologyDivision/RVTransmogrifier/mm.rds")
devtools::use_data(GSINF)
library(devtools)
devtools::use_data(GSINF)
library(purrr)
library(dplyr)
library(devtools)
devtools::use_data(GSINF)
devtools::document()
devtools::document()
#' @title updateRVSurveyData
#' @description This function extracts the "main" data from 'groundfish' schema.  It i
#' @param fn.oracle.username default is \code{NULL} This is your username for accessing oracle
#' objects.
#' @param fn.oracle.password default is \code{NULL} This is your password for accessing oracle
#' objects.
#' @param fn.oracle.dsn default is \code{"PTRAN} This is your dsn/ODBC identifier for accessing
#' oracle objects.
#' @author  Mike McMahon, \email{Mike.McMahon@@dfo-mpo.gc.ca}
updateRVSurveyData<-function(fn.oracle.username = NULL,
fn.oracle.password = NULL,
fn.oracle.dsn = "PTRAN"
){
fathoms_to_meters <- function(field = NULL) {
field <- round(field*1.8288,2)
return(field)
}
DDMM_to_DDDD <- function(field = NULL){
dfNm <-deparse(substitute(field))
field <- (as.numeric(substr(field,1,2)) +(field - as.numeric(substr(field,1,2))*100)/60)
if (grepl("LONG", dfNm)) field <- field*-1
field <- round(field,6)
return(field)
}
if (!require(purrr)) install.packages('purrr')
if (!require(dplyr)) install.packages('dplyr')
if (!require(devtools)) install.packages('devtools')
library(purrr)
library(dplyr)
library(devtools)
allTbls = listTbls()
# make connection and extract all data to a list
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- allTbls
# beepr::beep()
## Various source tables need some tweaking to improve usability
#GSINF: add decimal degrees version of coords
res$GSINF$SLAT_DD  <- DDMM_to_DDDD(res$GSINF$SLAT)
res$GSINF$SLONG_DD <- DDMM_to_DDDD(res$GSINF$SLONG)
res$GSINF$ELAT_DD  <- DDMM_to_DDDD(res$GSINF$ELAT)
res$GSINF$ELONG_DD <- DDMM_to_DDDD(res$GSINF$ELONG)
#GSINF: populate DEPTH using DEPTH, DMIN and DMAX, as available
#(DEPTH used preferentially, otherwise use average of DMIN and DMAX)
res$GSINF$DEPTH_tmp <- NA
res$GSINF$DEPTH_tmp <- rowMeans(res$GSINF[,c("DMIN","DMAX")], na.rm = F) #first do average
res$GSINF[!is.na(res$GSINF$DEPTH),"DEPTH_tmp"]<- res$GSINF[!is.na(res$GSINF$DEPTH),"DEPTH"] #overwrite w depth, where avail
res$GSINF$DEPTH <- res$GSINF$DEPTH_tmp
res$GSINF$DEPTH_tmp <- NULL
#GSINF: add meters version of depths
res$GSINF$DMIN_M        <- fathoms_to_meters(res$GSINF$DMIN)
res$GSINF$DMAX_M        <- fathoms_to_meters(res$GSINF$DMAX)
res$GSINF$DEPTH_M       <- fathoms_to_meters(res$GSINF$DEPTH)
res$GSINF$START_DEPTH_M <- fathoms_to_meters(res$GSINF$START_DEPTH)
res$GSINF$END_DEPTH_M   <- fathoms_to_meters(res$GSINF$END_DEPTH)
#GSINF: remove the time component from SDATE - "TIME" field should be used instead.
# remove ETIME - for end time, best to add tow duration to TIME field
res$GSINF$SDATE <- as.Date(res$GSINF$SDATE)
res$GSINF$ETIME <- NULL
#GSCAT: following combines numbers and weights for different size classes within a set
#this drops MARKET (never populated) & REMARKS.
res$GSCAT <- res$GSCAT %>%
group_by(MISSION, SETNO, SPEC, LENGTH_TYPE, LENGTH_UNITS, WEIGHT_TYPE, WEIGHT_UNITS) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep") %>%
as.data.frame()
#GSSPECIES_20220624: remove temp, internal field and poorly used ENTR field
res$GSSPECIES_20220624$N_OCCURENCES_GSCAT <- NULL
res$GSSPECIES_20220624$ENTR <- NULL
# add all of the list objects to the package
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
}
updateRVSurveyData()
listTbls<-function(){
c("GSAUX", "GSCAT", "GSCURNT", "GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT", "GSINF", "GSMATURITY",
"GSMISSIONS", "GSSEX","GSSPEC", "GSSPECIES",
"GSSTRATUM", "GSWARPOUT", "GSXTYPE",
"GSSPECIES_20220624", "GSSPECIES_TAX")
}
#' @title updateRVSurveyData
#' @description This function extracts the "main" data from 'groundfish' schema.  It i
#' @param fn.oracle.username default is \code{NULL} This is your username for accessing oracle
#' objects.
#' @param fn.oracle.password default is \code{NULL} This is your password for accessing oracle
#' objects.
#' @param fn.oracle.dsn default is \code{"PTRAN} This is your dsn/ODBC identifier for accessing
#' oracle objects.
#' @author  Mike McMahon, \email{Mike.McMahon@@dfo-mpo.gc.ca}
updateRVSurveyData<-function(fn.oracle.username = NULL,
fn.oracle.password = NULL,
fn.oracle.dsn = "PTRAN"
){
fathoms_to_meters <- function(field = NULL) {
field <- round(field*1.8288,2)
return(field)
}
DDMM_to_DDDD <- function(field = NULL){
dfNm <-deparse(substitute(field))
field <- (as.numeric(substr(field,1,2)) +(field - as.numeric(substr(field,1,2))*100)/60)
if (grepl("LONG", dfNm)) field <- field*-1
field <- round(field,6)
return(field)
}
if (!require(purrr)) install.packages('purrr')
if (!require(dplyr)) install.packages('dplyr')
if (!require(devtools)) install.packages('devtools')
library(purrr)
library(dplyr)
library(devtools)
allTbls = c("GSAUX", "GSCAT", "GSCURNT", "GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT", "GSINF", "GSMATURITY",
"GSMISSIONS", "GSSEX","GSSPEC", "GSSPECIES",
"GSSTRATUM", "GSWARPOUT", "GSXTYPE",
"GSSPECIES_20220624", "GSSPECIES_TAX")
# make connection and extract all data to a list
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- allTbls
# beepr::beep()
## Various source tables need some tweaking to improve usability
#GSINF: add decimal degrees version of coords
res$GSINF$SLAT_DD  <- DDMM_to_DDDD(res$GSINF$SLAT)
res$GSINF$SLONG_DD <- DDMM_to_DDDD(res$GSINF$SLONG)
res$GSINF$ELAT_DD  <- DDMM_to_DDDD(res$GSINF$ELAT)
res$GSINF$ELONG_DD <- DDMM_to_DDDD(res$GSINF$ELONG)
#GSINF: populate DEPTH using DEPTH, DMIN and DMAX, as available
#(DEPTH used preferentially, otherwise use average of DMIN and DMAX)
res$GSINF$DEPTH_tmp <- NA
res$GSINF$DEPTH_tmp <- rowMeans(res$GSINF[,c("DMIN","DMAX")], na.rm = F) #first do average
res$GSINF[!is.na(res$GSINF$DEPTH),"DEPTH_tmp"]<- res$GSINF[!is.na(res$GSINF$DEPTH),"DEPTH"] #overwrite w depth, where avail
res$GSINF$DEPTH <- res$GSINF$DEPTH_tmp
res$GSINF$DEPTH_tmp <- NULL
#GSINF: add meters version of depths
res$GSINF$DMIN_M        <- fathoms_to_meters(res$GSINF$DMIN)
res$GSINF$DMAX_M        <- fathoms_to_meters(res$GSINF$DMAX)
res$GSINF$DEPTH_M       <- fathoms_to_meters(res$GSINF$DEPTH)
res$GSINF$START_DEPTH_M <- fathoms_to_meters(res$GSINF$START_DEPTH)
res$GSINF$END_DEPTH_M   <- fathoms_to_meters(res$GSINF$END_DEPTH)
#GSINF: remove the time component from SDATE - "TIME" field should be used instead.
# remove ETIME - for end time, best to add tow duration to TIME field
res$GSINF$SDATE <- as.Date(res$GSINF$SDATE)
res$GSINF$ETIME <- NULL
#GSCAT: following combines numbers and weights for different size classes within a set
#this drops MARKET (never populated) & REMARKS.
res$GSCAT <- res$GSCAT %>%
group_by(MISSION, SETNO, SPEC, LENGTH_TYPE, LENGTH_UNITS, WEIGHT_TYPE, WEIGHT_UNITS) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep") %>%
as.data.frame()
#GSSPECIES_20220624: remove temp, internal field and poorly used ENTR field
res$GSSPECIES_20220624$N_OCCURENCES_GSCAT <- NULL
res$GSSPECIES_20220624$ENTR <- NULL
# add all of the list objects to the package
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
}
updateRVSurveyData()
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
head(GSINF)
devtools::document()
updateRVSurveySpatialData <- function(){
library(ggplot2)
library(mapdata)
library(sf)
nafo_sf <- sf::st_read("inst/rawSpatial/NAFO_polyBlocks.shp")
nafo_sf$Shape_Leng<- nafo_sf$ORIG_FID <- nafo_sf$Shape_Le_1 <- nafo_sf$Shape_Area <- nafo_sf$OBJECTID <- NULL
colnames(nafo_sf)[colnames(nafo_sf)=="UnitArea"] <- "NAFO"
nafo_sf$NAFO <- toupper(nafo_sf$NAFO)
nafo_sf <- st_transform(nafo_sf, crs = 4326)
usethis::use_data(nafo_sf, overwrite = TRUE)
strataMar_sf <- sf::st_read("inst/rawSpatial/MaritimesRegionEcosystemAssessmentStrata(2014-).shp")
colnames(strataMar_sf)[colnames(strataMar_sf)=="StrataID"] <- "STRATA_ID"
colnames(strataMar_sf)[colnames(strataMar_sf)=="Areakm"] <- "AREA_KM"
strataMar_sf$TYPE <- NULL
strataMar_sf <- st_transform(strataMar_sf, crs = 4326)
usethis::use_data(strataMar_sf, overwrite = TRUE)
}
updateRVSurveySpatialData()
head(strataMar_sf)
strataMar_sf <- sf::st_read("inst/rawSpatial/MaritimesRegionEcosystemAssessmentStrata(2014-).shp")
colnames(strataMar_sf)[colnames(strataMar_sf)=="StrataID"] <- "STRATA_ID"
colnames(strataMar_sf)[colnames(strataMar_sf)=="Areakm"] <- "AREA_KM"
head(strataMar_sf)
strataMar_sf$TYPE <- NULL
head(strataMar_sf)
strataMar_sf <- st_transform(strataMar_sf, crs = 4326)
usethis::use_data(strataMar_sf, overwrite = TRUE)
devtools::document()
cleantheGarbage()
install_github('PopulationEcologyDivision\RVSurveyData')
install_github('PopulationEcologyDivision/RVSurveyData')
remove.packages("RVSurveyData", lib="~/R/win-library/4.1")
install_github('PopulationEcologyDivision/RVSurveyData')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("RVSurveyData", lib="~/R/win-library/4.1")
