force(GSMISSIONS)
force(GSSPEC)
force(GSSPECIES)
force(GSSTRATA)
force(GSSTRATUM)
force(GSVESSEL)
force(GSXTYPE)
View(GSGEAR)
View(GSDET)
library(RVSurveyData)
View(GSCAT)
remove.packages("RVSurveyData", lib="~/R/win-library/4.1")
remove.packages("RVSurveyDataNMFS", lib="~/R/win-library/4.1")
install.packages("C:/git/Maritimes/RVSurveyDataNMFS_2022.06.08.zip", repos = NULL, type = "win.binary")
library(RVSurveyDataNMFS)
head(UNION_FSCS_SVCAT)
install.packages("C:/git/Maritimes/RVSurveyDataNMFS_2022.06.08.zip", repos = NULL, type = "win.binary")
remove.packages("RVSurveyDataNMFS", lib="~/R/win-library/4.1")
install.packages("C:/git/Maritimes/RVSurveyDataNMFS_2022.06.08.zip", repos = NULL, type = "win.binary")
install.packages("C:/git/Maritimes/RVSurveyDataNMFS_2022.06.08.zip", repos = NULL, type = "win.binary")
library(RVSurveyDataNMFS)
head(UNION_FSCS_SVCAT)
install.packages("C:/git/Maritimes/RVSurveyData_2022.03.10.zip", repos = NULL, type = "win.binary")
library(RVSurveyData)
head(GSCAT)
load("C:/git/Maritimes/RVSurveyData/data/GSCRUISELIST.rda")
View(GSCRUISELIST)
load("C:/git/Maritimes/RVSurveyData/data/GSMISSIONS.rda")
View(GSMISSIONS)
load("C:/git/Maritimes/RVSurveyData/data/GSMISSIONS.rda")
recentMission <- utils::head(GSMISSIONS[with(GSMISSIONS, order(-as.numeric(YEAR))), c("MISSION", "YEAR", "SEASON")],1)
recentMission
unique(GSMISSIONS)
unique(GSMISSIONS$SEASON)
MikeIt()
MikeIt(all = T)
aggregate(YEAR ~ MISSION+SEASON, data = GSMISSIONS, max)
aggregate(YEAR ~ SEASON, data = GSMISSIONS, max)
library(dplyr)
GSMISSIONS %>% group_by(SEASON) %>% top_n(1, YEAR)
GSMISSIONS[,c("MISSION", "YEAR", "SEASON")] %>% group_by(SEASON) %>% top_n(1, YEAR)
GSMISSIONS[,c("YEAR", "SEASON")] %>% group_by(SEASON) %>% top_n(1, YEAR)
GSMISSIONS %>% group_by(SEASON) %>% top_n(1, YEAR)
GSMISSIONS[,c("YEAR","SEASON")] %>% group_by(SEASON) %>% top_n(1, YEAR)
unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* ", paste("Newest Mission Available: ", paste(recentData, collapse = " ")))
paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available: \n")
newsDir = "c:/git/PopulationEcologyDivision/RVSurveyData"
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
# find most recent information, and update news
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available: \n")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(recentData, file = filename, append = TRUE)
rm(GSMISSIONS)
rm(recentData)
rm(recentMission)
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSMISSIONS.rda")
newsDir = "c:/git/PopulationEcologyDivision/RVSurveyData"
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
# find most recent information, and update news
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available: \n")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(recentData, file = filename, append = TRUE)
library(dplyr)
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
# find most recent information, and update news
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available: \n")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(recentData, file = filename, append = TRUE)
View(recentData)
??fwrite
write(newTxt, file = filename, append = FALSE)
write(paste0(colnames(mydf), collapse = ','), file = filename, append = T, sep = '\n')
write(apply(mydf,1,paste0, collapse=','), file = filename, append = T, sep = '\n')
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(paste0(colnames(recentData), collapse = ','), file = filename, append = T, sep = '\n')
write(apply(recentData,1,paste0, collapse=','), file = filename, append = T, sep = '\n')
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(paste0("\t",colnames(recentData), collapse = ','), file = filename, append = T, sep = '\n')
write(paste0("\t",apply(recentData,1,paste0, collapse=',')), file = filename, append = T, sep = '\n')
MikeIt()
recentData<- recentData[with(recentData,order(-YEAR, -SEASON)),]
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
recentData<- recentData[with(recentData,order(-YEAR, -SEASON)),]
recentData
recentData<- recentData[order(-YEAR, -rank(SEASON)),]
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
recentData<- recentData[order(-YEAR, -rank(SEASON)),]
recentData<- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
recentData
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): \n")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(paste0("\t",colnames(recentData), collapse = ','), file = filename, append = T, sep = '\n')
write(paste0("\t",apply(recentData,1,paste0, collapse=',')), file = filename, append = T, sep = '\n')
recentData<- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
# find most recent information, and update news
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): \n")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
#write(paste0("\t",colnames(recentData), collapse = ','), file = filename, append = T, sep = '\n')
write(paste0("\t",apply(recentData,1,paste0, collapse=',')), file = filename, append = T, sep = '\t')
recentData<- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
# find most recent information, and update news
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): \n")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
#write(paste0("\t",colnames(recentData), collapse = ','), file = filename, append = T, sep = '\n')
write(paste0("\t",apply(recentData,1,paste0, collapse='\t')), file = filename, append = T, sep = '\t')
recentData<- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
# find most recent information, and update news
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): ")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
#write(paste0("\t",colnames(recentData), collapse = ','), file = filename, append = T, sep = '\n')
write(paste0("\t",apply(recentData,1,paste0, collapse='\t')), file = filename, append = T, sep = '\t')
load("C:/git/PopulationEcologyDivision/RVSurveyData/data/GSINF.rda")
average(GSINF$DEPTH)
mean(GSINF$DEPTH, na.rm = T)
GSINF<-GSINF[GSINF$STRAT >= 440 & GSINF$STRAT <=495,]
mean(GSINF$DEPTH, na.rm = T)
?GSINF
??GSINF
range(GSINF, na.rm = T)
range(GSINF$DEPTH, na.rm = T)
rm(GSCAT)
rm(GSINF)
#' @title updateRVSurveyData
#' @description This function extracts the "main" data from 'groundfish' schema.
#' @param fn.oracle.username default is \code{'_none_'} This is your username for
#' accessing oracle objects. If you have a value for \code{oracle.username}
#' stored in your environment (e.g. from an rprofile file), this can be left out
#' and that value will be used.  If a value for this is provided, it will take
#' priority over your existing value.
#' @param fn.oracle.password default is \code{'_none_'} This is your password for
#' accessing oracle objects. If you have a value for \code{oracle.password}
#' stored in your environment (e.g. from an rprofile file), this can be left out
#' and that value will be used.  If a value for this is provided, it will take
#' priority over your existing value.
#' @param fn.oracle.dsn default is \code{'_none_'} This is your dsn/ODBC
#' identifier for accessing oracle objects. If you have a value for
#' \code{oracle.dsn} stored in your environment (e.g. from an rprofile file),
#' this can be left and that value will be used.  If a value for this is
#' provided, it will take priority over your existing value.
#' @author  Mike McMahon, \email{Mike.McMahon@@dfo-mpo.gc.ca}
#' @export
updateRVSurveyData<-function(fn.oracle.username = NULL,
fn.oracle.password = NULL,
fn.oracle.dsn = "PTRAN"
){
newsDir = "c:/git/PopulationEcologyDivision/RVSurveyData"
allTbls = c("GSAUX", "GSCAT", "GSCRUISELIST", "GSCURNT", "GSDET", "GSFORCE",
"GSGEAR", "GSHOWOBT", "GSINF", "GSMISSIONS", "GSSPEC", "GSSPECIES",
"GSSTRATA", "GSSTRATUM", "GSVESSEL", "GSXTYPE")
# make connection and extract all data to a list
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
# add all of the list objects to the package
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
#Update the news file to reflect the most recent data available
recentData <- unique(GSMISSIONS[,c("YEAR","SEASON")]) %>% group_by(SEASON) %>% top_n(1, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): ")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(paste0("\t",apply(recentData,1,paste0, collapse='\t')), file = filename, append = T, sep = '\t')
}
updateRVSurveyData()
#updateRVSurveyData(fn.oracle.username = oracle.password, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
updateRVSurveyData(fn.oracle.username = oracle.password, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.password, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), fn.oracle.username, fn.oracle.password, fn.oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
updateRVSurveyData(fn.oracle.username = groundfish.username, fn.oracle.password = groundfish.password, fn.oracle.dsn = oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
Mar.fleets::fleet_hagfish
Mar.fleets::fleet_halibut
Mar.fleets::LIC_CORE[Mar.fleets::LIC_CORE$FLEET=="HALIBUT",]
Mar.fleets::LIC_AREAS[Mar.fleets::LIC_AREAS=="3NOPS4VWX5",]
Mar.fleets::LIC_AREAS
Mar.fleets::LIC_CORE[Mar.fleets::LIC_CORE$FLEET=="HALIBUT",]
#Mar.fleets::LIC_AREAS[Mar.fleets::LIC_AREAS$FLEET=="HALIBUT" & Mar.fleets::LIC_AREAS$FLEET_AREA_ID=="",]
Mar.fleets::LIC_AREAS[Mar.fleets::LIC_AREAS$FLEET=="HALIBUT" & Mar.fleets::LIC_AREAS$FLEET_AREA_ID=="3NOPS4VWX5",]
Mar.fleets::[Mar.fleets::LIC_GEAR_SPEC$FLEET=="HALIBUT" & Mar.fleets::LIC_GEAR_SPEC$=="",]
View(Mar.fleets::LIC_CORE)
Mar.fleets::LIC_CORE[Mar.fleets::LIC_CORE$FLEET=="CHP",]
Mar.fleets::fishin_CHPs
Mar.fleets::LIC_AREAS[Mar.fleets::LIC_AREAS$FLEET=="CHP",]
Mar.fleets::LIC_GEAR_SPEC[Mar.fleets::LIC_GEAR_SPEC$FLEET=="CHP",]
??fishin_CHPS
Mar.fleets::LIC_CORE[Mar.fleets::LIC_CORE$FLEET=="CHP",]
Mar.fleets::LIC_AREAS[Mar.fleets::LIC_AREAS$FLEET=="CHP" & Mar.fleets::LIC_AREAS$FLEET_AREA_ID=="FLEET_AREA_ID",]
Mar.fleets::LIC_AREAS[Mar.fleets::LIC_AREAS$FLEET=="CHP" & Mar.fleets::LIC_AREAS$FLEET_AREA_ID=="4X5Y",]
Mar.fleets::LIC_GEAR_SPEC[Mar.fleets::LIC_GEAR_SPEC$FLEET=="CHP" & Mar.fleets::LIC_GEAR_SPEC$FLEET_GEARSPECS_ID=="4X5Y_MOB",]
devtools::document()
library(RVSurveyData)
library(purrr)
library(dplyr)
newsDir = "c:/git/PopulationEcologyDivision/RVSurveyData"
allTbls = c("GSAUX", #"GSCAT",
"GSCRUISELIST", "GSCURNT", #"GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT")
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), oracle.username, oracle.password, oracle.dsn)
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
rames(res)<- allTbls
names(res)<- allTbls
res$GSAUX
purrr::walk2(res, names(res), function(obj, name) {
# assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
library(devtools)
purrr::walk2(res, names(res), function(obj, name) {
# assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
#Update the news file to reflect the most recent data available
recentData <- unique(res$GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(1, YEAR)
allTbls = c("GSAUX", #"GSCAT",
"GSCRUISELIST", "GSCURNT", #"GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT",
#"GSINF", "GSMATURITY",
"GSMISSIONS")#, "GSSEX","GSSPEC", "GSSPECIES", "GSSTRATA",
#"GSSTRATUM", "GSVESSEL", "GSXTYPE")
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- allTbls
# add all of the list objects to the package
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
#Update the news file to reflect the most recent data available
recentData <- unique(res$GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(1, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): ")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(paste0("\t",apply(recentData,1,paste0, collapse='\t')), file = filename, append = T, sep = '\t')
allTbls = c("GSAUX", "GSCAT", "GSCRUISELIST", "GSCURNT", "GSDET",
"GSFORCE", "GSGEAR", "GSHOWOBT", "GSINF", "GSMATURITY",
"GSMISSIONS", "GSSEX","GSSPEC", "GSSPECIES", "GSSTRATA",
"GSSTRATUM", "GSVESSEL", "GSXTYPE")
res <- lapply(allTbls,
function(myTable){
sqlStatement <- paste0("select * from GROUNDFISH.",myTable)
ROracle::dbGetQuery(con, sqlStatement)
})
names(res)<- allTbls
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
recentData <- unique(res$GSMISSIONS[,c("YEAR","SEASON")]) %>% dplyr::group_by(SEASON) %>% dplyr::top_n(1, YEAR)
recentData <- recentData[order(-recentData$YEAR, -rank(recentData$SEASON)),]
newTxt <- paste0("# RVSurveyData Version",": ", utils::packageDescription('RVSurveyData')$Version,"\n",
"* Data updated: ", format(Sys.Date(), '%Y/%m/%d'),"\n",
"* Newest Data Available (by Season): ")
filename=file.path(newsDir,'NEWS.md')
write(newTxt, file = filename, append = FALSE)
write(paste0("\t",apply(recentData,1,paste0, collapse='\t')), file = filename, append = T, sep = '\t')
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
library(RVSurveyData)
fathoms_to_meters <- function(field = NULL) {
field <- field*1.8288
return(field)
}
allTbls
GSAUX
names(GSCAT)
GSCURNT
GSFORCE
GSGEAR
allTbls
names(GSINF)
??GSINF
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/utilities.R")
fathoms_to_meters <- function(field = NULL) {
field <- field*1.8288
return(field)
}
GSINF$DMIN_M        <- fathoms_to_meters(GSINF$DMIN)
GSINF$DMAX_M        <- fathoms_to_meters(GSINF$DMAX)
GSINF$DEPTH_M       <- fathoms_to_meters(GSINF$DEPTH)
GSINF$START_DEPTH_M <- fathoms_to_meters(GSINF$START_DEPTH)
GSINF$END_DEPTH_M   <- fathoms_to_meters(GSINF$END_DEPTH)
View(GSINF)
MikeIt()
grepl("LONG", "ELONG")
grepl("LONG", "EAT")
DDMM_to_DDDD <- function(field = NULL){
dfNm <-deparse(substitute(field))
field <- (as.numeric(substr(field,1,2)) +(field - as.numeric(substr(field,1,2))*100)/60)
if (grepl("LONG", dfNm)) field <- field*-1
return(field)
}
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/utilities.R")
GSINF$SLAT_DD  <- DDMM_to_DDDD(GSINF$SLAT)
GSINF$SLONG_DD <- DDMM_to_DDDD(GSINF$SLONG)
GSINF$ELAT_DD  <- DDMM_to_DDDD(GSINF$ELAT)
GSINF$ELONG_DD <- DDMM_to_DDDD(GSINF$ELONG)
head(GSINF)
head(GSCAT)
head(GSCAT)
View(GSCAT[!is.na(GSCAT$MARKET),])
View(GSCAT[is.na(GSCAT$MARKET),])
tt<-Mar.qcdata::uniqueValuesPerField(GSCAT, cols_ignore = c("MISSION", "SETNO", "SPEC", "SAMPWGT", "TOTWGT", "TOTNO"))
tt$CALWT
tt$REMARKS
tt$SIZE_CLASS
tt$LENGTH_TYPE
GSCAT$MARKET <- NULL
GSCAT_dplyr <- GSCAT %>%
group_by(MISSION, SETNO, SPEC) %>%
summarise(RND_WEIGHT_KGS = sum(RND_WEIGHT_KGS))
GSCAT_dplyr <- GSCAT %>%
group_by(MISSION, SETNO, SPEC) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT))
head(GSCAT_dplyr)
GSCAT_dplyr <- GSCAT %>%
group_by(MISSION, SETNO, SPEC) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = keep)
GSCAT_dplyr <- GSCAT %>%
group_by(MISSION, SETNO, SPEC) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep")
GSCAT2 <- GSCAT
GSCAT2[is.na(GSCAT2$TOTNO),"TOTNO"]<-0
GSCAT2[is.na(GSCAT2$TOTWGT),"TOTWGT"]<-0
GSCAT2[is.na(GSCAT2$SAMPWGT),"SAMPWGT"]<-0
GSCAT2 <- stats::aggregate(
x = list(
SAMPWGT = GSCAT2$SAMPWGT,
TOTWGT = GSCAT2$TOTWGT,
TOTNO = GSCAT2$TOTNO),
by = list(
MISSION = GSCAT2$MISSION,
SETNO = GSCAT2$SETNO,
SPEC = GSCAT2$SPEC),
sum
)
head(GSCAT)
rm(GSCAT2)
GSCAT_dplyr3 <- GSCAT %>%
group_by(MISSION, SETNO, SPEC, LENGTH_TYPE, LENGTH_UNITS, WEIGHT_TYPE, WEIGHT_UNITS) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep")
View(GSCAT_dplyr3)
GSCAT_dplyr4 <- GSCAT %>%
group_by(MISSION, SETNO, SPEC, LENGTH_TYPE, LENGTH_UNITS, WEIGHT_TYPE, WEIGHT_UNITS, REMARKS) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep")
View(GSCAT_dplyr4)
rm(GSCAT_dplyr4)
rm(GSCAT_dplyr)
rm(GSCAT_dplyr3)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/utilities.R")
View(GSINF)
str(GSINF)
tt<-Mar.qcdata::uniqueValuesPerField(GSINF)
tt
res$GSINF$SLAT_DD  <- DDMM_to_DDDD(res$GSINF$SLAT)
res$GSINF$SLONG_DD <- DDMM_to_DDDD(res$GSINF$SLONG)
res$GSINF$ELAT_DD  <- DDMM_to_DDDD(res$GSINF$ELAT)
res$GSINF$ELONG_DD <- DDMM_to_DDDD(res$GSINF$ELONG)
#to meters
res$GSINF$DMIN_M        <- fathoms_to_meters(res$GSINF$DMIN)
res$GSINF$DMAX_M        <- fathoms_to_meters(res$GSINF$DMAX)
res$GSINF$DEPTH_M       <- fathoms_to_meters(res$GSINF$DEPTH)
res$GSINF$START_DEPTH_M <- fathoms_to_meters(res$GSINF$START_DEPTH)
res$GSINF$END_DEPTH_M   <- fathoms_to_meters(res$GSINF$END_DEPTH)
res$GSCAT <- res$GSCAT %>%
group_by(MISSION, SETNO, SPEC, LENGTH_TYPE, LENGTH_UNITS, WEIGHT_TYPE, WEIGHT_UNITS) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep")
head(res$GSCAT)
res$GSCAT <- res$GSCAT %>%
group_by(MISSION, SETNO, SPEC, LENGTH_TYPE, LENGTH_UNITS, WEIGHT_TYPE, WEIGHT_UNITS) %>%
summarise(TOTNO = sum(TOTNO),
TOTWGT = sum(TOTWGT),
SAMPWGT = sum(SAMPWGT), .groups = "keep") %>%
as.data.frame()
head(res$GSCAT)
head(GSAUX)
head(GSCRUISELIST)
devtools::document()
head(RVSurveyData::GSCAT)
head(res$GSCAT)
purrr::walk2(res, names(res), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
head(RVSurveyData::GSCAT)
library(RVSurveyData)
head(RVSurveyData::GSCAT)
fathoms_to_meters <- function(field = NULL) {
field <- round(field*1.8288,2)
return(field)
}
DDMM_to_DDDD <- function(field = NULL){
dfNm <-deparse(substitute(field))
field <- round(as.numeric(substr(field,1,2)) +(field - as.numeric(substr(field,1,2))*100)/60),6)
if (grepl("LONG", dfNm)) field <- field*-1
return(field)
}
?rowMeans
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/utilities.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/utilities.R")
library(RVSurveyData)
View(GSINF)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
updateRVSurveyData(fn.oracle.username = oracle.username, fn.oracle.password = oracle.password, fn.oracle.dsn = oracle.dsn)
document()
RVSurveyData::GSSPECIES_20220624[RVSurveyData::GSSPECIES_20220624$CODE==9343,]
sqlStatement <- paste0("select * from GROUNDFISH.GSSPECIES_20220624")
GSSPECIES_20220624<-ROracle::dbGetQuery(con, sqlStatement)
con <- ROracle::dbConnect(DBI::dbDriver("Oracle"), oracle.username, oracle.password, oracle.dsn)
GSSPECIES_20220624<-ROracle::dbGetQuery(con, sqlStatement)
GSSPECIES_20220624<-ROracle::dbGetQuery(con, "select * from GROUNDFISH.GSSPECIES_20220624")
GSSPECIES_TAX<-ROracle::dbGetQuery(con, "select * from GROUNDFISH.GSSPECIES_TAX")
GSSPECIES_20220624$N_OCCURENCES_GSCAT <- NULL
use_data(GSSPECIES_20220624)
use_data(GSSPECIES_20220624, overwrite = T)
use_data(GSSPECIES_TAX, overwrite = T)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
View(GSSPECIES_TAX)
GSSPECIES_TAX<-ROracle::dbGetQuery(con, "select * from GROUNDFISH.GSSPECIES_TAX")
use_data(GSSPECIES_TAX, overwrite = T)
res$GSSPECIES_20220624$ENTR <- NULL
GSSPECIES_20220624$ENTR <- NULL
use_data(GSSPECIES_20220624, overwrite = T)
source("C:/git/PopulationEcologyDivision/RVSurveyData/inst/updateRVSurveyData.R")
devtools::document()
